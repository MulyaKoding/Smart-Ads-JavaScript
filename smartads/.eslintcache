[{"D:\\Data Juara Coding\\Smart Ads\\smartads\\src\\index.js":"1","D:\\Data Juara Coding\\Smart Ads\\smartads\\src\\reportWebVitals.js":"2","D:\\Data Juara Coding\\Smart Ads\\smartads\\src\\App.js":"3"},{"size":517,"mtime":1610424009027,"results":"4","hashOfConfig":"5"},{"size":375,"mtime":1610424009406,"results":"6","hashOfConfig":"5"},{"size":3797,"mtime":1610435288029,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"b8q8no",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"D:\\Data Juara Coding\\Smart Ads\\smartads\\src\\index.js",[],["16","17"],"D:\\Data Juara Coding\\Smart Ads\\smartads\\src\\reportWebVitals.js",[],"D:\\Data Juara Coding\\Smart Ads\\smartads\\src\\App.js",["18"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport React from 'react'\r\nrequire('@tensorflow/tfjs-backend-cpu');\r\nrequire('@tensorflow/tfjs-backend-webgl');\r\nconst cocoSsd = require('@tensorflow-models/coco-ssd')\r\n\r\nclass App extends React.Component {\r\n  // reference to both the video and canvas\r\n  videoRef = React.createRef();\r\n  canvasRef = React.createRef();\r\n\r\n  // we are gonna use inline style\r\n  styles = {\r\n    position: 'fixed',\r\n    top: 150,\r\n    left: 150,\r\n  };\r\n\r\n\r\n  detectFromVideoFrame = (model, video) => {\r\n    model.detect(video).then(predictions => {\r\n      this.showDetections(predictions);\r\n\r\n      requestAnimationFrame(() => {\r\n        this.detectFromVideoFrame(model, video);\r\n      });\r\n    }, (error) => {\r\n      console.log(\"Couldn't start the webcam\")\r\n      console.error(error)\r\n    });\r\n  };\r\n\r\n  showDetections = predictions => {\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    const font = \"24px helvetica\";\r\n    ctx.font = font;\r\n    ctx.textBaseline = \"top\";\r\n\r\n    predictions.forEach(prediction => {\r\n      const x = prediction.bbox[0];\r\n      const y = prediction.bbox[1];\r\n      const width = prediction.bbox[2];\r\n      const height = prediction.bbox[3];\r\n      // Draw the bounding box.\r\n      ctx.strokeStyle = \"#2fff00\";\r\n      ctx.lineWidth = 1;\r\n      ctx.strokeRect(x, y, width, height);\r\n      // Draw the label background.\r\n      ctx.fillStyle = \"#2fff00\";\r\n      const textWidth = ctx.measureText(prediction.class).width;\r\n      const textHeight = parseInt(font, 10);\r\n      // draw top left rectangle\r\n      ctx.fillRect(x, y, textWidth + 10, textHeight + 10);\r\n      // draw bottom left rectangle\r\n      ctx.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\r\n\r\n      // Draw the text last to ensure it's on top.\r\n      ctx.fillStyle = \"#000000\";\r\n      ctx.fillText(prediction.class, x, y);\r\n      ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia) {\r\n      // define a Promise that'll be used to load the webcam and read its frames\r\n      const webcamPromise = navigator.mediaDevices\r\n        .getUserMedia({\r\n          video: true,\r\n          audio: false,\r\n        })\r\n        .then(stream => {\r\n          // pass the current frame to the window.stream\r\n          window.stream = stream;\r\n          // pass the stream to the videoRef\r\n          this.videoRef.current.srcObject = stream;\r\n\r\n          return new Promise(resolve => {\r\n            this.videoRef.current.onloadedmetadata = () => {\r\n              resolve();\r\n            };\r\n          });\r\n        }, (error) => {\r\n          console.log(\"Couldn't start the webcam\")\r\n          console.error(error)\r\n        });\r\n\r\n      // define a Promise that'll be used to load the model\r\n      const loadlModelPromise = cocoSsd.load();\r\n      \r\n      // resolve all the Promises\r\n      Promise.all([loadlModelPromise, webcamPromise])\r\n        .then(values => {\r\n          this.detectFromVideoFrame(values[0], this.videoRef.current);\r\n        })\r\n        .catch(error => {\r\n          console.error(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  // here we are returning the video frame and canvas to draw,\r\n  // so we are in someway drawing our video \"on the go\"\r\n  render() {\r\n    return (\r\n      <div> \r\n        <video\r\n          style={this.styles}\r\n          autoPlay\r\n          muted\r\n          playsInline\r\n          ref={this.videoRef}\r\n          width=\"720\"\r\n          height=\"600\"\r\n        />\r\n        <canvas style={this.styles} ref={this.canvasRef} width=\"720\" height=\"650\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":1,"column":8,"nodeType":"25","messageId":"26","endLine":1,"endColumn":12},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]